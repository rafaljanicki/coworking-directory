AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template to deploy the coworking backend as a Lambda behind API Gateway.

Globals:
  Function:
    Runtime: nodejs22.x
    MemorySize: 512
    Timeout: 30
    Environment:
      Variables:
        NODE_ENV: production
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowCredentials: false
  
Parameters:
  ApiDomainName:
    Type: String
    Default: api.biuracoworking.pl
    Description: Custom domain name for the API
  ApiCertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the custom domain (must be in the same region)

Resources:
  ApiFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: lambda.handler
      CodeUri: ../dist
      Description: Backend API for coworking spaces
      Events:
        ApiProxy:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY
            Auth:
              ApiKeyRequired: true
      Environment:
        Variables:
          NODE_ENV: production
          COWORKING_SPACES_TABLE: !Ref CoworkingSpacesTable
          SERVICES_TABLE: !Ref ServicesTable
          SPACE_SERVICES_TABLE: !Ref SpaceServicesTable
          PRICING_PACKAGES_TABLE: !Ref PricingPackagesTable
          REPORTS_TABLE: !Ref ReportsTable

  # DynamoDB tables
  CoworkingSpacesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  ServicesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  SpaceServicesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  PricingPackagesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  ReportsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  ApiGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: "CoworkingDirectoryApiKey"
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ServerlessRestApi
          StageName: Prod

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: "CoworkingDirectoryUsagePlan"
      ApiStages:
        - ApiId: !Ref ServerlessRestApi
          Stage: Prod

  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      UsagePlanId: !Ref ApiGatewayUsagePlan
      KeyId: !Ref ApiGatewayApiKey
      KeyType: API_KEY
  
  # Custom Domain for API Gateway
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref ApiDomainName
      RegionalCertificateArn: !Ref ApiCertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: Prod

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiKey:
    Description: "API key ID for authorized requests"
    Value: !Ref ApiGatewayApiKey
  
  # Custom domain outputs for DNS configuration
  CustomDomainName:
    Description: "Custom domain name for the API"
    Value: !Ref ApiDomainName

  CustomDomainRegionalDomainName:
    Description: "Regional domain name to use as DNS target"
    Value: !GetAtt ApiGatewayDomainName.RegionalDomainName

  CustomDomainRegionalHostedZoneId:
    Description: "Regional hosted zone ID for DNS alias"
    Value: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId