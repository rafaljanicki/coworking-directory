AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SAM template to deploy the coworking backend as separate Lambda functions.

Globals:
  Function:
    Runtime: nodejs22.x
    MemorySize: 512
    Timeout: 30
    Environment:
      Variables:
        NODE_ENV: !Ref Environment
        NODE_OPTIONS: --enable-source-maps
        COWORKING_SPACES_TABLE: !Ref CoworkingSpacesTable
        SERVICES_TABLE: !Ref ServicesTable
        SPACE_SERVICES_TABLE: !Ref SpaceServicesTable
        PRICING_PACKAGES_TABLE: !Ref PricingPackagesTable
        REPORTS_TABLE: !Ref ReportsTable
  Api:
    Cors:
      AllowOrigin: "'*'"
      AllowMethods: "'*'"
      AllowHeaders: "'*'"
      AllowCredentials: false
  
Parameters:
  ApiDomainName:
    Type: String
    Default: api.biuracoworking.pl
    Description: Custom domain name for the API
  ApiCertificateArn:
    Type: String
    Description: ARN of the ACM certificate for the custom domain (must be in the same region)
  Environment:
    Type: String
    Description: Name of the current environment
    Default: production

Resources:
  # DynamoDB tables
  CoworkingSpacesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  ServicesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  SpaceServicesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  PricingPackagesTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  ReportsTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      PrimaryKey:
        Name: id
        Type: Number

  # Lambda Functions for each endpoint
  HealthCheckFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/healthCheck.handler
      CodeUri: .
      Description: Health check endpoint
      Events:
        RootApi:
          Type: Api
          Properties:
            Path: /
            Method: GET
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  SpacesListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/getSpaces.handler
      CodeUri: .
      Description: Get all coworking spaces with optional filtering
      Events:
        Api:
          Type: Api
          Properties:
            Path: /spaces
            Method: GET
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  SpaceByIdFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/getSpaceById.handler
      CodeUri: .
      Description: Get a specific coworking space by ID
      Events:
        Api:
          Type: Api
          Properties:
            Path: /spaces/{id}
            Method: GET
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  ServicesListFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/getServices.handler
      CodeUri: .
      Description: Get all services
      Events:
        Api:
          Type: Api
          Properties:
            Path: /services
            Method: GET
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  SpaceServicesFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/getSpaceServices.handler
      CodeUri: .
      Description: Get services for a specific coworking space
      Events:
        Api:
          Type: Api
          Properties:
            Path: /spaces/{id}/services
            Method: GET
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  SpacePricingFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/getSpacePricing.handler
      CodeUri: .
      Description: Get pricing for a specific coworking space
      Events:
        Api:
          Type: Api
          Properties:
            Path: /spaces/{id}/pricing
            Method: GET
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  CreateReportFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/createReport.handler
      CodeUri: .
      Description: Submit a report for a coworking space
      Events:
        Api:
          Type: Api
          Properties:
            Path: /reports
            Method: POST
            Auth:
              ApiKeyRequired: true
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  OptionsFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: server/handlers/handleOptions.handler
      CodeUri: .
      Description: Handle OPTIONS requests for CORS
      Events:
        SpacesOptions:
          Type: Api
          Properties:
            Path: /spaces
            Method: OPTIONS
        SpaceByIdOptions:
          Type: Api
          Properties:
            Path: /spaces/{id}
            Method: OPTIONS
        ServicesOptions:
          Type: Api
          Properties:
            Path: /services
            Method: OPTIONS
        SpaceServicesOptions:
          Type: Api
          Properties:
            Path: /spaces/{id}/services
            Method: OPTIONS
        SpacePricingOptions:
          Type: Api
          Properties:
            Path: /spaces/{id}/pricing
            Method: OPTIONS
        ReportsOptions:
          Type: Api
          Properties:
            Path: /reports
            Method: OPTIONS
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Format: esm
        Minify: false
        OutExtension:
          - .js=.mjs
        Target: "es2020"
        Sourcemap: true
        Banner:
          - js=import { createRequire } from 'module'; const require = createRequire(import.meta.url);

  # API Gateway resources
  ApiGatewayApiKey:
    Type: AWS::ApiGateway::ApiKey
    Properties:
      Name: "CoworkingDirectoryApiKey"
      Enabled: true
      StageKeys:
        - RestApiId: !Ref ServerlessRestApi
          StageName: Prod

  ApiGatewayUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    Properties:
      UsagePlanName: "CoworkingDirectoryUsagePlan"
      ApiStages:
        - ApiId: !Ref ServerlessRestApi
          Stage: Prod

  ApiGatewayUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties:
      UsagePlanId: !Ref ApiGatewayUsagePlan
      KeyId: !Ref ApiGatewayApiKey
      KeyType: API_KEY
  
  # Custom Domain for API Gateway
  ApiGatewayDomainName:
    Type: AWS::ApiGateway::DomainName
    Properties:
      DomainName: !Ref ApiDomainName
      RegionalCertificateArn: !Ref ApiCertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  ApiGatewayBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref ApiGatewayDomainName
      RestApiId: !Ref ServerlessRestApi
      Stage: Prod

Outputs:
  ApiUrl:
    Description: "API Gateway endpoint URL"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
  ApiKey:
    Description: "API key ID for authorized requests"
    Value: !Ref ApiGatewayApiKey
  
  # Custom domain outputs for DNS configuration
  CustomDomainName:
    Description: "Custom domain name for the API"
    Value: !Ref ApiDomainName

  CustomDomainRegionalDomainName:
    Description: "Regional domain name to use as DNS target"
    Value: !GetAtt ApiGatewayDomainName.RegionalDomainName

  CustomDomainRegionalHostedZoneId:
    Description: "Regional hosted zone ID for DNS alias"
    Value: !GetAtt ApiGatewayDomainName.RegionalHostedZoneId